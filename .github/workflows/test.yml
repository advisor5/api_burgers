name: api_burgers

on:
  push:
    branches:
      - develop # Запускать workflow при пуше в develop

  pull_request:
    branches:
      - develop  # Запускать workflow при открытии PR в develop

jobs:
  run-tests: # Джоба для запуска тестов
    runs-on: ubuntu-latest # Используем последнюю версию Ubuntu

    steps:
      - name: Check out repository # Клонирование кода репозитория в среду CI/CD
        uses: actions/checkout@v4 # Действие checkout извлекает код вашего
        # репозитория из исполняющего устройства, чтобы рабочий процесс мог получить к нему доступ. 

      - name: Set up Python  # Установка Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13.3' # Используем Python версии 3.13.3

      - name: Install dependencies  # Установка зависимостей проекта
        run: |
            python -m pip install --upgrade pip
            pip install poetry
            poetry install
            
      - name: Run API tests with pytest and generate Allure results # Запуск тестов
        env:
          HOST: ${{ secrets.HOST }}
        run:
            poetry run pytest tests/test_create_order.py --alluredir=allure-results
        # Запускаем тесты с меткой "regression"
        # --alluredir=allure-results сохраняет результаты в папку allure-results
        # --numprocesses 2 - выполняем тесты в 2 потока (ускоряет выполнение)
        continue-on-error: true

      - name: Upload Allure results # Загружаем результаты тестов в GitHub Actions
        if: always() # Загружаем файлы независимо от успеха/неуспеха тестов
        uses: actions/upload-artifact@v4
        with:
          name: allure-results # Название артефакта
          path: allure-results # Путь к файлам отчета

  publish-report: # Джоба для публикации Allure-отчета на GitHub Pages
    if: always()
    needs: [ run-tests ] # Выполняется только после успешного выполнения run-tests
    runs-on: ubuntu-latest # Используем последнюю версию Ubuntu

    steps:
      - name: Check out repository # Клонируем репозиторий, включая ветку gh-pages
        uses: actions/checkout@v4
        with:
          ref: gh-pages # Операции будем выполнять в ветке gh-pages
          path: gh-pages # Клонируем файлы в папку gh-pages

      - name: Download Allure results  # Загружаем ранее сохраненные результаты тестов
        uses: actions/download-artifact@v4
        with:
          name: allure-results # Название артефакта
          path: allure-results # Путь для скачивания

      - name: Allure Report action from marketplace # Генерация отчета Allure
        uses: simple-elf/allure-report-action@v1.12
        if: always()
        with:
          allure_results: allure-results # Папка с результатами тестов
          allure_history: allure-history  # Папка для хранения истории отчетов

      - name: Deploy report to Github Pages # Публикация отчета на GitHub Pages
        if: always()
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }} # Токен для доступа к репозиторию
          publish_branch: gh-pages # Публикуем отчет в ветку gh-pages
          publish_dir: allure-history # Папка, где находится сгенерированный отчет
